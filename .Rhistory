pruif(virginica)
pruif("virginica")
x<- if(iris$Species=="virginica"){ mean(iris$Sepal.Length)}
x
x<- if(iris$Species=="virginica"){ mean(iris$Sepal.Length)}
x<- if(iris$Species=="virginica"){ print('si')}
x<-iris$Species=="virginica"
x
class(iris)
x<- data.frame(iris$Species="virginica")
x<- data.frame(iris$Species=="virginica")
x
x<-subset(iris,colMeans(iris[, 1:Species(iris)]="virginica"))
x<-subset(iris,colMeans(iris[, 5:Species(iris)]="virginica"),)
x <- colMeans(iris, iris$Species="virginica")
x <- colMeans(iris$Sepal.Length, iris$Species="virginica")
do.call("rbind", as.list(
by(iris, list(Species=iris$Species), function(x){
y <- subset(x, select= -Species)
apply(y, 2, mean)
}
)))
rowMeans(iris[, 1:4])
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcars
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(iris[, 1:4], 2, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
x<-tapply(mtcars$hp, mtcars$cyl, mean)
x
b<-x[1]
b
b<-x[2,1]
class(b)
d<-x[3]
d
e<-b-d
e
debug(ls)
ls
ls
n
a
x
ls
debug(ls)
ls
debug(ls)
n
x
ls
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
Q
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x=c(1,2,3))
m
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
a<-cachemean(makeVector(x=c(1,2,3)))
a
a<-cachemean(makeVector(x=c(1,2,3,4)))
a
x
a<-cachemean(makeVector(x=c(1,2,3,4)))
x
a<-cachemean(makeVector(x=c(1,2,3)))
a
x
a<-cachemean(makeVector(x=c(1,1,2,2)))
x
a<-cachemean(makeVector(x=c(1,1)))
x
a
leb <-c(1,2,3)
leb
solve(x)
mat1 = matrix(r, nrow=3, ncol=3)
mat1 = matrix(c(1,2,3,4,5,6), nrow=3, ncol=3)
mat1
solve(mat1)
mat1 = matrix(c(1,2,3,1,1,1,3,5,9), nrow=3, ncol=3)
solve(mat1)
mat1
message("getting cached data")
makeCacheMatrix <- function(x = matrix()) {
invm <- NULL
set <- function(y){
x <<-y
invm <<- NULL
}
get <-function()x
setinvers <- function(invers) invm <<-invers
getinvers <- function() invm
list(set = set, get = get,
setinvers = setinvers,
getinvers = getinvers)
}
## The following function calculates the inverse of the matrix
##   It first checks if the inverse matrix has already been calculated.
##   If so, it gets the inverse matrix from the cache and skips the computation.
##   Otherwise, it calculates it, and sets the value of the inverse matrix in the
##   cache via the setinvers function.
##   This function assumes that the matrix is always invertible
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invm <- x$getinvers()
if(!is.null(invm)) {
message("getting cached data")
return(invm)
}
data <- x$get()
invm <- solve(data)
x$setinvere(invm)
invm
}
> x = rbind(c(1, -1/4), c(-1/4, 1))
x = rbind(c(1, -1/4), c(-1/4, 1))
x
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
View(cacheSolve)
View(cacheSolve)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invm <- x$getinvers()
if(!is.null(invm)) {
message("getting cached data")
return(invm)
}
data <- x$get()
invm <- solve(data)
x$setinvers(invm)
invm
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(y)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "1c819a69974324a8a4f9",
secret = "704f63884e8dbefac3dc1872e9d7960170da5007")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)}
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "1c819a69974324a8a4f9",
secret = "704f63884e8dbefac3dc1872e9d7960170da5007")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
myapp <- oauth_app("github",
key = "1c819a69974324a8a4f9",
secret = "704f63884e8dbefac3dc1872e9d7960170da5007")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "1c819a69974324a8a4f9",
secret = "704f63884e8dbefac3dc1872e9d7960170da5007")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "1c819a69974324a8a4f9",
secret = "704f63884e8dbefac3dc1872e9d7960170da5007")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
HELP(NCHAR)
HELP("NCHAR")
help(nchar)
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode=readlines(con)
con
help("readlines")
nchar(line[1])
nchar(con[1])
nchar(con[10])
text <- readLines(con)[[1]]
text
text <- readLines(con)[[10]]
text
text <- nchar(con)[[10]]
a<-nchar(con)
a
a<-nchar(con[1])
a
a<-nchar(con[10])
a
a
a<-nchar(con[20])
a
b <- nchar(readLines(con)[[10]])
b
b <- nchar(readLines(con)[[20]])
b
b <- nchar(readLines(con)[[30]])
b
b <- nchar(readLines(con)[[100]])
b
ser = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
ser
text <- readLines(ser)
text
ls(text)
text[10]
library(dplyr)
install.packages("dplyr")
library(dplyr)
options(width = 105)
install.packages("ReadImages")
readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ", native = TRUE)
install.packages("libjpeg")
library(libjpeg)
library(jpeg)
install.packages("jpeg")
library(jpeg)
readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ", native = TRUE)
a<-readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ", native = TRUE)
a<-readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native = TRUE)
myurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
z <- tempfile()
download.file(myurl,z,mode="wb")
a<-readJPEG(z, native = TRUE)
b <- cut(a, breaks = quantile(30,80))
b <- cut(a, breaks = quantile(.30,.80))
b <- cut(a, breaks = quantile(.3,.8))
quantile(a, probs = c(0.3, 0.8))
require(XML)
install.packages("XML")
library(XML)
require(XML)
data <- xmlParse("C:\Users\MXI02003873A\AppData\Local\Microsoft\Windows\Temporary Internet Files\Content.Outlook\L1VSFZIO\PortalInd_DEV (002).XML")
data <- xmlParse("C:\_Proyectos\Datos\Desarrollo\EODS\Analisis\Autos\PPortalInd_DEV.XML")
data <- xmlParse("C:/_Proyectos/Datos/Desarrollo/EODS/Analisis/Autos/PPortalInd_DEV.XML")
data <- xmlParse("C:/_Proyectos/Datos/Desarrollo/EODS/Analisis/Autos/PPortalInd_DEV")
result <- xmlParse(file = "C:/_Proyectos/Datos/Desarrollo/EODS/Analisis/Autos/PPortalInd_DEV")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
View(a)
a <- Diet
a <- BodyWeight
help(panel.abline())
help(panel.abline())
help(panel.abline())
help(panel.abline
help(panel.abline)
help("panel.abline")
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(lattice)
library(datasets)
data(airquality)xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(lattice)
library(datasets)
data(airquality)
xyplot(Ozone ~ Wind | factor(Month), data = airquality)
help("splom")
help("trellis.par.set")
help("par")
help("print.trellis")
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
help("qplot")
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
g
library(ggplot2)
library(ggplot2movies)
ggplot(movies, aes(votes, rating))
qplot(votes, rating, data = movies)
help("trellis.par.set")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2movies)
install.packages("ggplot2movies")
library(ggplot2)
library(ggplot2movies)
ggplot(movies, aes(votes, rating))
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
g <- ggplot(movies, aes(votes, rating))
g
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
g
ggplot(movies, aes(votes, rating))
strsplit("wgtp73")
strsplit("wgtp73",wgtp)
strsplit("wgtp73","wgtp")
a<-download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
a<-download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
help("download.file")
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv, a)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", a)
names(a)
View(a)
names(a)
a$names
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("xts")
install.packages("xts")
install.packages("xts")
install.packages("xts")
install.packages("zoo")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library(xts)
library(zoo)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
packages <- c("data.table", "quantmod")
sapply(packages, require, character.only = TRUE, quietly = TRUE)
amzn <- getSymbols("AMZN", auto.assign = FALSE)
library(reshape2)
archivo <- "getdata_dataset.zip"
if (!file.existsarchivo {
URL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip "
download.file(URL, archivo , method="curl")
}
if (!file.exists("UCI HAR Dataset")) {
unzip(archivo )
}
if (!file.exists(archivo {
URL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip "
download.file(URL, archivo , method="curl")
}
if (!file.exists("UCI HAR Dataset")) {
unzip(archivo )
}
URL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(URL, archivo , method="curl")
download.file(URL, destfile = "Dataset.zip", method = "curl")
library(ggplot2)
library(scales)
library(Hmisc)
install.packages("Hmisc")
library(ggplot2)
library(scales)
library(Hmisc)
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
activityData <- read.csv('activity.csv')
dir("C:\_Proyectos\Coursera\R\5 Reproducible Research\Week 2\Project\RepData_PeerAssessment1")
dir("C:/_Proyectos/Coursera/R/5 Reproducible Research/Week 2/Project/RepData_PeerAssessment1")
setwd ("C:/_Proyectos/Coursera/R/5 Reproducible Research/Week 2/Project/RepData_PeerAssessment1")
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
activityData <- read.csv('activity.csv')
#activityData$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activityData$interval), format='%H:%M')
stepsByDay <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
qplot(stepsByDay, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=500)
stepsByDayMean <- mean(stepsByDay)
stepsByDayMedian <- median(stepsByDay)
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), by=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
ggplot(data=averageStepsPerTimeBlock, aes(x=interval, y=meanSteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
mostSteps <- which.max(averageStepsPerTimeBlock$meanSteps)
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averageStepsPerTimeBlock[mostSteps,'interval'])
numMissingValues <- length(which(is.na(activityData$steps)))
activityDataImputed <- activityData
activityDataImputed$steps <- impute(activityData$steps, fun=mean)
stepsByDayImputed <- tapply(activityDataImputed$steps, activityDataImputed$date, sum)
qplot(stepsByDayImputed, xlab='Total steps per day (Imputed)', ylab='Frequency using binwith 500', binwidth=500)
stepsByDayMeanImputed <- mean(stepsByDayImputed)
stepsByDayMedianImputed <- median(stepsByDayImputed)
activityDataImputed$dateType <-  ifelse(as.POSIXlt(activityDataImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
averagedActivityDataImputed <- aggregate(steps ~ interval + dateType, data=activityDataImputed, mean)
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
View(activityData)
